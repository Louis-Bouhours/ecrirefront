name: CI_CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  quality-security:
    name: Code Quality and Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: fs
          scan-ref: .

  docker-release:
    name: Build and Release Docker
    runs-on: ubuntu-latest
    needs: [quality-security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set IMAGE_NAME (lower-case)
        run: |
          IMAGE_NAME="ghcr.io/$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t "$IMAGE_NAME:latest" -t "$IMAGE_NAME:${{ github.run_number }}" .

      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME:latest"
          docker push "$IMAGE_NAME:${{ github.run_number }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: |
             generated github release
            - Docker image: ${{ env.IMAGE_NAME }}:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [docker-release]
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          # Image (calculée à l’exécution sur le runner, réutilisée côté VPS)
          GH_REPO: ${{ github.repository }}
          # Auth GHCR côté VPS: utilisez un PAT avec 'read:packages'
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GHCR_PAT }}
          # Port d’expo sur l’hôte (optionnel). Par défaut 8085 si non fourni.
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          # Nom du conteneur cible
          CONTAINER_NAME: ecrirefront
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: GH_REPO,GH_USER,GH_TOKEN,DEPLOY_PORT,CONTAINER_NAME
          script: |
            set -euo pipefail

            if [ -z "${GH_TOKEN:-}" ]; then
              echo "Missing GHCR_PAT (mapped to GH_TOKEN). Create a PAT with 'read:packages' and add it as repo secret GHCR_PAT."
              exit 1
            fi

            echo "Logging into GitHub Container Registry..."
            echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin

            # Compute image name in lower-case
            IMAGE_NAME="ghcr.io/$(echo "$GH_REPO" | tr '[:upper:]' '[:lower:]')"
            PORT="${DEPLOY_PORT:-8085}"

            echo "Using image: ${IMAGE_NAME}:latest"
            echo "Expose container port 80 on host 127.0.0.1:${PORT}"

            echo "Pulling the latest image..."
            docker pull "${IMAGE_NAME}:latest"

            echo "Stopping and removing old container if exists..."
            docker stop "${CONTAINER_NAME}" || true
            docker rm "${CONTAINER_NAME}" || true

            echo "Starting new container..."
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              -p 127.0.0.1:${PORT}:80 \
              "${IMAGE_NAME}:latest"

            echo "Cleaning up old images..."
            docker image prune -f

            echo "Logging out from GHCR..."
            docker logout ghcr.io

            echo "Deploy complete."