name: CI_CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  quality-security:
    name: Code Quality and Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: fs
          scan-ref: .

  docker-release:
    name: Build and Release Docker
    runs-on: ubuntu-latest
    needs: [quality-security]
    env:
      IMAGE_NAME: ${{ format('ghcr.io/{0}', toLower(github.repository)) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t "${{ env.IMAGE_NAME }}:latest" -t "${{ env.IMAGE_NAME }}:${{ github.run_number }}" .

      - name: Push Docker image
        run: |
          docker push "${{ env.IMAGE_NAME }}:latest"
          docker push "${{ env.IMAGE_NAME }}:${{ github.run_number }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Release v${{ github.run_number }}"
          body: |
            generated github release
            - Docker image: ${{ env.IMAGE_NAME }}:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [docker-release]
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          IMAGE_NAME: ${{ format('ghcr.io/{0}', toLower(github.repository)) }}
          GH_USER: ${{ github.actor }}
          GH_TOKEN: ${{ secrets.GHCR_PAT }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          CONTAINER_NAME: ecrirefront
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          host_fingerprint: ${{ secrets.VPS_HOST_FINGERPRINT }}
          envs: IMAGE_NAME,GH_USER,GH_TOKEN,DEPLOY_PORT,CONTAINER_NAME
          script: |
            set -euo pipefail

            # Connexion à GHCR (nécessaire si image privée)
            if [ -n "${GH_TOKEN:-}" ]; then
              echo "$GH_TOKEN" | docker login ghcr.io -u "$GH_USER" --password-stdin
            fi

            PORT="${DEPLOY_PORT:-8085}"
            echo "Using image: ${IMAGE_NAME}:latest"
            echo "Exposing container 80 on host 127.0.0.1:${PORT}"

            docker pull "${IMAGE_NAME}:latest"

            docker stop "${CONTAINER_NAME}" || true
            docker rm "${CONTAINER_NAME}" || true

            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              -p 127.0.0.1:${PORT}:80 \
              "${IMAGE_NAME}:latest"

            docker image prune -f || true

            if [ -n "${GH_TOKEN:-}" ]; then
              docker logout ghcr.io
            fi

            echo "Deploy complete."